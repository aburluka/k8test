// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: internal/proto/bucket.proto

package bucket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	RegisterBucket(ctx context.Context, in *RegisterBucketRequest, opts ...grpc.CallOption) (*RegisterBucketResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) RegisterBucket(ctx context.Context, in *RegisterBucketRequest, opts ...grpc.CallOption) (*RegisterBucketResponse, error) {
	out := new(RegisterBucketResponse)
	err := c.cc.Invoke(ctx, "/bucket.ApiService/RegisterBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	RegisterBucket(context.Context, *RegisterBucketRequest) (*RegisterBucketResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) RegisterBucket(context.Context, *RegisterBucketRequest) (*RegisterBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBucket not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_RegisterBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RegisterBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.ApiService/RegisterBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RegisterBucket(ctx, req.(*RegisterBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bucket.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterBucket",
			Handler:    _ApiService_RegisterBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/bucket.proto",
}

// BucketServiceClient is the client API for BucketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BucketServiceClient interface {
	UploadChunks(ctx context.Context, opts ...grpc.CallOption) (BucketService_UploadChunksClient, error)
	DownloadChunks(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (BucketService_DownloadChunksClient, error)
	DeleteFragment(ctx context.Context, in *DeleteFragmentRequest, opts ...grpc.CallOption) (*DeleteFragmentResponse, error)
}

type bucketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketServiceClient(cc grpc.ClientConnInterface) BucketServiceClient {
	return &bucketServiceClient{cc}
}

func (c *bucketServiceClient) UploadChunks(ctx context.Context, opts ...grpc.CallOption) (BucketService_UploadChunksClient, error) {
	stream, err := c.cc.NewStream(ctx, &BucketService_ServiceDesc.Streams[0], "/bucket.BucketService/UploadChunks", opts...)
	if err != nil {
		return nil, err
	}
	x := &bucketServiceUploadChunksClient{stream}
	return x, nil
}

type BucketService_UploadChunksClient interface {
	Send(*UploadChunk) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type bucketServiceUploadChunksClient struct {
	grpc.ClientStream
}

func (x *bucketServiceUploadChunksClient) Send(m *UploadChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bucketServiceUploadChunksClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bucketServiceClient) DownloadChunks(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (BucketService_DownloadChunksClient, error) {
	stream, err := c.cc.NewStream(ctx, &BucketService_ServiceDesc.Streams[1], "/bucket.BucketService/DownloadChunks", opts...)
	if err != nil {
		return nil, err
	}
	x := &bucketServiceDownloadChunksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BucketService_DownloadChunksClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type bucketServiceDownloadChunksClient struct {
	grpc.ClientStream
}

func (x *bucketServiceDownloadChunksClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bucketServiceClient) DeleteFragment(ctx context.Context, in *DeleteFragmentRequest, opts ...grpc.CallOption) (*DeleteFragmentResponse, error) {
	out := new(DeleteFragmentResponse)
	err := c.cc.Invoke(ctx, "/bucket.BucketService/DeleteFragment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketServiceServer is the server API for BucketService service.
// All implementations must embed UnimplementedBucketServiceServer
// for forward compatibility
type BucketServiceServer interface {
	UploadChunks(BucketService_UploadChunksServer) error
	DownloadChunks(*DownloadRequest, BucketService_DownloadChunksServer) error
	DeleteFragment(context.Context, *DeleteFragmentRequest) (*DeleteFragmentResponse, error)
	mustEmbedUnimplementedBucketServiceServer()
}

// UnimplementedBucketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBucketServiceServer struct {
}

func (UnimplementedBucketServiceServer) UploadChunks(BucketService_UploadChunksServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadChunks not implemented")
}
func (UnimplementedBucketServiceServer) DownloadChunks(*DownloadRequest, BucketService_DownloadChunksServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadChunks not implemented")
}
func (UnimplementedBucketServiceServer) DeleteFragment(context.Context, *DeleteFragmentRequest) (*DeleteFragmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFragment not implemented")
}
func (UnimplementedBucketServiceServer) mustEmbedUnimplementedBucketServiceServer() {}

// UnsafeBucketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketServiceServer will
// result in compilation errors.
type UnsafeBucketServiceServer interface {
	mustEmbedUnimplementedBucketServiceServer()
}

func RegisterBucketServiceServer(s grpc.ServiceRegistrar, srv BucketServiceServer) {
	s.RegisterService(&BucketService_ServiceDesc, srv)
}

func _BucketService_UploadChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BucketServiceServer).UploadChunks(&bucketServiceUploadChunksServer{stream})
}

type BucketService_UploadChunksServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadChunk, error)
	grpc.ServerStream
}

type bucketServiceUploadChunksServer struct {
	grpc.ServerStream
}

func (x *bucketServiceUploadChunksServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bucketServiceUploadChunksServer) Recv() (*UploadChunk, error) {
	m := new(UploadChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BucketService_DownloadChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BucketServiceServer).DownloadChunks(m, &bucketServiceDownloadChunksServer{stream})
}

type BucketService_DownloadChunksServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type bucketServiceDownloadChunksServer struct {
	grpc.ServerStream
}

func (x *bucketServiceDownloadChunksServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _BucketService_DeleteFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).DeleteFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.BucketService/DeleteFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).DeleteFragment(ctx, req.(*DeleteFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BucketService_ServiceDesc is the grpc.ServiceDesc for BucketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BucketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bucket.BucketService",
	HandlerType: (*BucketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteFragment",
			Handler:    _BucketService_DeleteFragment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadChunks",
			Handler:       _BucketService_UploadChunks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadChunks",
			Handler:       _BucketService_DownloadChunks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto/bucket.proto",
}
